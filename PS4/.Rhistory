x = (1,2)
x <- (1,2)
x <- c(1,2)
2^10
?.Machine
.Machine
my.first.app <- function(){"Hello World!"}
my.first.app()
type(my.first.app())
class(my.first.app())
my.first.app <- function{"Hello World!"}
my.first.app <- function(){Hello World!}
pareto.simulator <- function(rdraws, alpha){
paretodraw <- (1-rdraws)**(-1/alpha)
}
pareto.simulator(runif(100), 2)
s<-pareto.simulator(runif(100), 2)
hist(pareto.simulator(runif(100), 2))
hist(pareto.simulator(runif(1000), 2))
hist(pareto.simulator(runif(1000), 5))
var(c(2,5,7))
var(c(4,10,14))
var(c(2,5,7))/5
var(c(4,10,14))/10
var(c(2,5,7))/25
var(c(4,10,14))/100
sd(c(3,5,7))
sd(c(6,10,14))
sd(c(3,5,7))/5
sd(c(6,10,14))/10
library("foreign", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
PFpackages <- c('biglm', 'ffbase', 'ggplot2', 'sgd')
install.packages(PFpackages, repos = 'http://cran.rstudio.com/')# ffbase Provides support for data.frame like objects that connect to
require(ffbase)
require(biglm)
# ggplot2 is for flexible plotting
require(ggplot2)
# sgd is for stochastic gradient descent methods
require(sgd)
install.packages("ggplot2")
install.packages("plyr")
load("/media/balint/Storage/Tanulas/Computing Lab/Project/lyrics_data.RData")
lyrics[56777]
library(mvtnorm)
# create small wrapper functions
sigmaXY <- function(rho, sdX, sdY) {
covTerm <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),
2, 2, byrow = TRUE)
return(VCmatrix)
}
genBVN <- function(n = 1, seed = NA, muXY=c(0,1), sigmaXY=diag(2)) {
if(!is.na(seed)) set.seed(seed)
rdraws <- rmvnorm(n, mean = muXY, sigma = sigmaXY)
return(rdraws)
}
# creating a function for all of this
loanData <- function(noApproved, noDenied, noUndecided,
muApproved, muDenied, muUndecided,
sdApproved, sdDenied, sdUndecided,
rhoApproved, rhoDenied, rhoUndecided, seed=1111) {
sigmaApproved <- sigmaXY(rho=rhoApproved, sdX=sdApproved[1], sdY=sdApproved[2])
sigmaDenied <- sigmaXY(rho=rhoDenied, sdX=sdDenied[1], sdY=sdDenied[2])
sigmaUndecided <- sigmaXY(rho=rhoUndecided, sdX=sdUndecided[1], sdY=sdUndecided[2])
approved <- genBVN(noApproved, muApproved, sigmaApproved, seed = seed)
denied <- genBVN(noDenied, muDenied, sigmaDenied, seed = seed+1)
undecided <- genBVN(noUndecided, muUndecided, sigmaUndecided, seed = seed+1)
loanDf <- as.data.frame(rbind(approved,denied,undecided))
deny <- c(rep("Approved", noApproved), rep("Denied", noDenied), rep("Undecided", noUndecided))
targetApproved = c(rep(1, noApproved), rep(0, noDenied), rep(0, noUndecided))
targetDenied = c(rep(0, noApproved), rep(1, noDenied), rep(0, noUndecided))
targetUndecided = c(rep(0, noApproved), rep(0, noDenied), rep(1, noUndecided))
loanDf <- data.frame(loanDf, deny, targetApproved, targetDenied, targetUndecided)
colnames(loanDf) <- c("PIratio", "solvency", "deny", "targetApproved", "targetDenied", "targetUndecided")
return(loanDf)
}
loanDf <- loanData(noApproved=50, noDenied=50, noUndecided=25,
c(4, 150), c(10, 100), c(8, 160),
c(1,20), c(2,30), c(2, 10), -0.1, 0.6, 0.2, 1221)
# analytical solution
X <- as.matrix(cbind(ind=rep(1, nrow(loanDf)),
loanDf[,c("PIratio", "solvency")]))
Y <- as.matrix(loanDf[,c("targetApproved", "targetDenied", "targetUndecided")])
weightsOptim <- solve(t(X)%*%X) %*% t(X) %*% Y
# compute predictions
predictions <- data.frame(X %*% weightsOptim)
names(predictions) <- c("predictionApproved", "predictionDenied", "predictionUndecided")
loanDf <- cbind(loanDf, predictions)
# classify according to the argmax criterion
loanDf$predictedLabels[loanDf$predictionApproved > loanDf$predictionDenied
& loanDf$predictionApproved > loanDf$predictionUndecided] <- "Approved"
loanDf$predictedLabels[loanDf$predictionDenied > loanDf$predictionApproved
& loanDf$predictionDenied > loanDf$predictionUndecided] <- "Denied"
loanDf$predictedLabels[loanDf$predictionUndecided > loanDf$predictionApproved
& loanDf$predictionUndecided > loanDf$predictionDenied] <- "Undecided"
# classification algorithm performance
table(loanDf$deny, loanDf$predictedLabels)
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=(c(,)))
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial"))
View(weightsOptim)
View(X)
View(Y)
View(predictions)
View(weightsOptim)
b <- -weightsOptim[1,]
rep(1, 3)
A <- rbind(rep(1, 3), weightsOptim[1,])
View(A)
A <- rbind(rep(1, 3), weightsOptim[-1,])
View(A)
A <- rbind(rep(-1, 3), weightsOptim[-1,])
View(A)
solve(A, b)
A <- t(rbind(rep(-1, 3), weightsOptim[-1,]))
solve(A, b)
intersection <- solve(A, b)
View(loanDf)
lowpiont <- 0.9*min(loanDf$solvency)
lowsolvency <- 0.9*min(loanDf$solvency)
highsolvency <- 1.1*max(loanDf$solvency)
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1$solvency-weights2$solvency)+weights1$ind-weights2$ind)/(weights2$PIratio-weights1$PIratio)
}
weightsOptim$targetApproved
weightsOptim[,"targetApproved"]
PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
w<-weightsOptim[,"targetApproved"]
w["solvency"]
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"]/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
bh<-PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
bh
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
return PIratio
}
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
return PIratio
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline <- function(solvency, weights1, weights2){
piratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
bh<-PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
View(loanDf)
pilowsolvAD <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
pilowsolvAU <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetUndecided"])
pilowsolvDU <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetDenied"], weightsOptim[,"targetUndecided"])
pihighsolvAD <- PIratio_ontheline(highsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
pihighsolvAU <- PIratio_ontheline(highsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetUndecided"])
pihighsolvDU <- PIratio_ontheline(highsolvency, weightsOptim[,"targetDenied"], weightsOptim[,"targetUndecided"])
pilowsolvAD
intersection
intersection["PIratio"]
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD) )
}
prediction <- function(solvency, PIratio, weights){
r <- weights["ind"]+weights["solvency"]*solvency+weights["PIratio"]*PIratio
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1)
View(loanDf)
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep(2, "boundaryAD") )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep(2, "boundaryAD") )
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep(2, "boundaryAD") )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep(2, "boundaryAD") )
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep("boundaryAD",2) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep("boundaryAD",2) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1)
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep("boundaryAD",2) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep("boundaryAD",2) )
}
if( prediction(lowsolvency, pilowsolvAU, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAU, weightsOptim[,"targetDenied"])){
boundaryDf2 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAU), deny=rep("boundaryAU",2) )
} else {
boundaryDf2 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAU), deny=rep("boundaryAU",2) )
}
if( prediction(lowsolvency, pilowsolvDU, weightsOptim[,"targetDenied"]) > prediction(lowsolvency, pilowsolvDU, weightsOptim[,"targetApproved"])){
boundaryDf3 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvDU), deny=rep("boundaryDU",2) )
} else {
boundaryDf3 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvDU), deny=rep("boundaryDU",2) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1) +
geom_line(data=boundaryDf2) +
geom_line(data=boundaryDf3)
table(loanDf$deny, loanDf$predictedLabels)
lowPIratio <- 0.9*min(loanDf$PIratio)
highPIratio <- 1.1*max(loanDf$PIratio)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
setwd("/media/balint/Storage/Tanulas/Advanced_Computational_Methods/PS4")
m$prob
library(kknn)
source("displayDigit.R")
mnist_train <- read.csv("MNIST_training.csv")
mnist_test <- read.csv("MNIST_test.csv")
ks <- c(1, 3, 5, 7, 11, 15, 21, 29, 31, 51, 101)
ps <- c(1, 2, 3, 5, 10, 50)
m <- kknn( X.1 ~ . , train = mnist_train[1:3000,], test = mnist_train[3001:5999,], k = 7, distance = 2)
m$W
m$prob
m$CL
View(mnist_train)
m <- kknn( X4 ~ . , train = mnist_train[1:3000,], test = mnist_train[3001:5999,], k = 7, distance = 2)
m$W
m$prob
table(mnist_train[3001:5999,"X4"], m$fit)
m <- kknn( X4 ~ . , train = mnist_train[1:3000,], test = mnist_train[3001:5999,], k = 7, distance = 2, kernel = "rectangular")
m$response
m <- kknn( X4 ~ . , train = mnist_train[1:3000,], test = mnist_train[3001:5999,], k = 7, distance = 2, kernel = "rectangular")
round(m$fit)
mnist_train$X4 <- as.factor(mnist_train$X4)
m <- kknn( X4 ~ . , train = mnist_train[1:3000,],
test = mnist_train[3001:5999,], k = 7, distance = 2, kernel = "rectangular")
m$response
table(mnist_train[3001:5999,"X4"], m$fit)
accuracy <- function(valid, fit){
sum(valid==fit)/length(valid)
}
accuracy(mnist_train[3001:5999,"X4"], m$fit)
accuracy_table <- matrix(NA, length(ks), length(ps))
length(accuracy_table)
library(kknn)
source("displayDigit.R")
mnist_train <- read.csv("MNIST_training.csv")
mnist_test <- read.csv("MNIST_test.csv")
mnist_train$X4 <- as.factor(mnist_train$X4)
ks <- c(1, 3, 5, 7, 11, 15, 21, 29, 31, 51, 101)
ps <- c(1, 2, 3, 5, 10, 50)
accuracy_table <- matrix(NA, length(ks), length(ps))
length_accuracy_table <- length(accuracy_table)
cat('\tab')
cat('\t')
cat('\t', "c")
cat("\t")
for (k in 1:length(ks)){
for (p in 1:length(ps)){
k <- kknn( X.1 ~ . , train = mnist_train[1:3000,],
test = mnist_train[3001:5999,], k = ks[k], distance = ps[p], kernel = "rectangular")
accuracy_table[k, p] <- accuracy(k)
cat((k*(p-1)+p)/length_accuracy_table, "\t")
}
}
for (k in 1:length(ks)){
for (p in 1:length(ps)){
k <- kknn( X.1 ~ . , train = mnist_train[1:3000,],
test = mnist_train[3001:5999,], k = ks[k], distance = ps[p], kernel = "rectangular")
accuracy_table[k, p] <- accuracy(mnist_train[3001:5999,"X4"], k$fit)
cat((k*(p-1)+p)/length_accuracy_table, "\t")
}
}
k=1
p=1
k <- kknn( X.1 ~ . , train = mnist_train[1:3000,],
test = mnist_train[3001:5999,], k = ks[k], distance = ps[p], kernel = "rectangular")
k <- kknn( X4 ~ . , train = mnist_train[1:3000,],
test = mnist_train[3001:5999,], k = ks[k], distance = ps[p], kernel = "rectangular")
knn <- kknn( X4 ~ . , train = mnist_train[1:3000,],
test = mnist_train[3001:5999,], k = ks[k], distance = ps[p], kernel = "rectangular")
k=1
knn <- kknn( X4 ~ . , train = mnist_train[1:3000,],
test = mnist_train[3001:5999,], k = ks[k], distance = ps[p], kernel = "rectangular")
accuracy_table[k, p] <- accuracy(mnist_train[3001:5999,"X4"], knn$fit)
cat((k*(p-1)+p)/length_accuracy_table, "\t")
for (k in 1:length(ks)){
for (p in 1:length(ps)){
knn <- kknn( X4 ~ . , train = mnist_train[1:3000,],
test = mnist_train[3001:5999,], k = ks[k], distance = ps[p], kernel = "rectangular")
accuracy_table[k, p] <- accuracy(mnist_train[3001:5999,"X4"], knn$fit)
cat((k*(p-1)+p)/length_accuracy_table, "\t")
}
}
ks <- c(1, 3, 5, 9, 15, 23, 51)
ps <- c(1, 2, 3, 7, 50)
accuracy_table <- matrix(NA, length(ks), length(ps))
length_accuracy_table <- length(accuracy_table)
accuracy <- function(valid, fit){
sum(valid==fit)/length(valid)
}
for (k in 1:length(ks)){
for (p in 1:length(ps)){
knn <- kknn( X4 ~ . , train = mnist_train[1:3000,],
test = mnist_train[3001:5999,], k = ks[k], distance = ps[p], kernel = "rectangular")
accuracy_table[k, p] <- accuracy(mnist_train[3001:5999,"X4"], knn$fit)
cat((k*(p-1)+p)/length_accuracy_table, "\t")
}
}
accuracy_table
which.max(accuracy_table)
max(accuracy_table)
accuracy_table[8]
m <- kknn( X4 ~ . , train = mnist_train,
test = mnist_test, k = 1, distance = 2, kernel = "rectangular")
mnist_test$X4 <- NA
View(mnist_train)
mnist_train <- read.csv("MNIST_training.csv")
mnist_test <- read.csv("MNIST_test.csv")
mnist_train$X4 <- as.factor(mnist_train$X4)
mnist_test$X4 <- NA
View(mnist_test)
m <- kknn( X4 ~ . , train = mnist_train,
test = mnist_test, k = 1, distance = 2, kernel = "rectangular")
names(mnist_test)
source("displayDigit.R")
displayDigit(mnist_test[5,])
displayDigit(mnist_test[5,1:256])
displayDigit(mnist_train[5,])
displayDigit(mnist_train[5,2:257])
m <- kknn( X4 ~ . , train = mnist_train,
test = mnist_test, k = 1, distance = 2, kernel = "rectangular")
names(mnist_test)[-257]
names(mnist_train)[-1]
names(mnist_train)[-1]==names(mnist_test)[-257]
View(mnist_test)
View(mnist_test)
View(mnist_train)
displayDigit(mnist_train[77, 2:257], mnist_train[77, 1])
displayDigit(pixels=mnist_train[77, 2:257], label=mnist_train[77, 1])
displayDigit(pixels=mnist_train[77, 2:257], label=mnist_train[77, 1])
mnist_train[77, 2:257]
mnist_train[77, 1]
pixels=mnist_train[77, 2:257]
label=mnist_train[77, 1]
img = matrix(pixels, 16, 16, byrow = TRUE)
rotate <- function(x) t(apply(x, 2, rev))
img <- rotate(img)
predictedLabel = NULL
if (is.null(predictedLabel)) predictedLabel <- "-"
plotDigit <- function() {
par(mar = c(0, 0, 2, 0))
image(img, axes = FALSE, col = grey(seq(0, 1, length = 256)))
title(main = paste("Label: ", label, "|  Prediction: ",predictedLabel))
}
dev.new(width=4, height=4.2)
plotDigit()
displayDigit(pixels=as.numeric(mnist_train[77, 2:257]), label=mnist_train[77, 1])
displayDigit(pixels=as.numeric(mnist_test[77, 1:256]), label="fif")
names(mnist_test)[-257] <- names(mnist_train)[-1]
m <- kknn( X4 ~ . , train = mnist_train,
test = mnist_test, k = 1, distance = 2, kernel = "rectangular")
m$fit
save.csv(m$fit, "MNIST_predictions.csv")
write.csv(m$fit, "MNIST_predictions.csv")
library(kknn)
mnist_train <- read.csv("MNIST_training.csv")
mnist_test <- read.csv("MNIST_test.csv")
mnist_train$X4 <- as.factor(mnist_train$X4)
mnist_test$X4 <- NA
names(mnist_test)[-257] <- names(mnist_train)[-1]
m <- kknn( X4 ~ . , train = mnist_train,
test = mnist_test, k = 1, distance = 2, kernel = "rectangular")
write.csv(m$fit, "MNIST_predictions.csv", rowNames=FALSE)
write.csv(m$fit, "MNIST_predictions.csv", row.names=FALSE)
write.csv(m$fit, "MNIST_predictions.csv", row.names=FALSE, col.names=FALSE)
