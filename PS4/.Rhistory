assert_that(p %in% c(1, 2, Inf))
if (type == "predict") {
assert_that(not_empty(memory) &
ncol(memory) == ncol(features) &
nrow(memory) == length(labels))
}
# Compute the distance between each point and all others
noObs <- nrow(features)
labels <- as.factor(labels)
noLabels <- length(levels(labels))
# if we are making predictions on the test set based on the memory,
# we compute distances between each test observation and observations
# in our memory
if (type == "train") {
distMatrix <- matrix(NA, noObs, noObs)
for (obs in 1:noObs) {
# getting the probe for the current observation
probe <- as.numeric(features[obs,])
probeExpanded <- matrix(probe, nrow = noObs, ncol = 2,
byrow = TRUE)
# computing distances between the probe and exemplars in the
# training X
if (p %in% c(1,2)) {
distMatrix[obs, ] <- (rowSums((abs(features -
probeExpanded))^p) )^(1/p)
} else if (p==Inf) {
distMatrix[obs, ] <- apply(abs(features - probeExpanded), 1, max)
}
}
} else if (type == "predict") {
noMemory <- nrow(memory)
distMatrix <- matrix(NA, noObs, noMemory)
for (obs in 1:noObs) {
# getting the probe for the current observation
probe <- as.numeric(features[obs,])
probeExpanded <- matrix(probe, nrow = noMemory, ncol = 2,
byrow = TRUE)
# computing distances between the probe and exemplars in the memory
if (p %in% c(1,2)) {
distMatrix[obs, ] <- (rowSums((abs(memory -
probeExpanded))^p) )^(1/p)
} else if (p==Inf) {
distMatrix[obs, ] <- apply(abs(memory - probeExpanded), 1, max)
}
}
}
# Sort the distances in increasing numerical order and pick the first
# k elements
neighbors <- apply(distMatrix, 2, order) %>% t()
#    neighbors <- apply(distMatrix, 1, order)
# the most frequent class in the k nearest neighbors and predicted label
predLabels <- rep(NA, noObs)
prob <- matrix(NA, noObs, noLabels)
for (obs in 1:noObs) {
for(label in 1:noLabels){
prob[obs, label] <- sum(labels[neighbors[obs, 1:k]]==levels(labels)[label])/k
}
predLabels[obs] <- levels(labels)[ which.max( prob[obs,] ) ]
}
return(list(prob=prob, predLabels=predLabels))
}
ss.knn <- kNN(ss[,1:2], ss[,4], k = 3, p = 2)
library(dplyr)
ss.knn <- kNN(ss[,1:2], ss[,4], k = 3, p = 2)
ss$predLabels <- ss.knn$predLabels
ss$prob0 <- ss.knn$prob[,1]
ss$prob1 <- ss.knn$prob[,2]
ss2 <- genStickSnake(noStick=89, saveData=FALSE, savePlot=FALSE)
ss.knn2 <- kNN(ss2[,1:2], ss[,4], memory = ss[,1:2], k = 3, p = 2, type="predict")
ss2$predLabels <- ss.knn2$predLabels
ss2$prob0 <- ss.knn2$prob[,1]
ss2$prob1 <- ss.knn2$prob[,2]
table(ss2$label, ss2$predLabels)
table(ss$label, ss$predLabels)
ggplot(data = ss,
aes(x = x1, y = x2, colour=y, z=predLabels)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
theme_bw() +
stat_contour()
library(ggplot2)
ggplot(data = ss,
aes(x = x1, y = x2, colour=y, z=predLabels)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
theme_bw() +
stat_contour()
x1 <- seq(min(ss$x1), max(ss$x1), length.out = 200)
x2 <- seq(min(ss$x2), max(ss$x2), length.out = 200)
cgrid <- expand.grid(x1=x1, x2=x2)
x1 <- seq(min(ss$x1), max(ss$x1), length.out = 100)
x2 <- seq(min(ss$x2), max(ss$x2), length.out = 100)
cgrid <- expand.grid(x1=x1, x2=x2)
ss.knn2 <- kNN(cgrid, ss[,4], memory = ss[,1:2], k = 3, p = 2, type="predict")
ss.knn2$predLabels
ss.knn2 <- kNN(ss2[,1:2], ss[,4], memory = ss[,1:2], k = 3, p = 2, type="predict")
ss2$predLabels <- ss.knn2$predLabels
ss2$predLabels
ss2[,1:2]
View(cgrid)
ss.knn2 <- kNN(cgrid, ss[,4], memory = ss[,1:2], k = 3, p = 2, type="predict")
ss.knn2 <- kNN(cgrid, ss[,3], memory = ss[,1:2], k = 3, p = 2, type="predict")
max(c(2,2,1))
which.max(c(2,2,1))
which.max(c(2,2,1))
which.max(c(2,2.5,1))
ss2 <- genStickSnake(noStick=189, saveData=FALSE, savePlot=FALSE)
ss.knn2 <- kNN(ss2[,1:2], ss[,4], memory = ss[,1:2], k = 3, p = 2, type="predict")
ss.knn2 <- kNN(features=ss2[,1:2], labels=ss[,4], memory = ss[,1:2], k = 3, p = 2, type="predict")
features=ss2[,1:2], labels=ss[,4], memory = ss[,1:2], k = 3, p = 2, type="predict"
features=ss2[,1:2]
labels=ss[,4]
memory = ss[,1:2]
k = 3
p = 2
type="predict"
library(assertthat)
library(dplyr)
not_empty(features); not_empty(labels);
if (type == "train") {
assert_that(nrow(features) == length(labels))
}
is.string(type); assert_that(type %in% c("train", "predict"))
is.count(k);
assert_that(p %in% c(1, 2, Inf))
if (type == "predict") {
assert_that(not_empty(memory) &
ncol(memory) == ncol(features) &
nrow(memory) == length(labels))
}
noObs <- nrow(features)
labels <- as.factor(labels)
noLabels <- length(levels(labels))
noMemory <- nrow(memory)
distMatrix <- matrix(NA, noObs, noMemory)
for (obs in 1:noObs) {
# getting the probe for the current observation
probe <- as.numeric(features[obs,])
probeExpanded <- matrix(probe, nrow = noMemory, ncol = 2,
byrow = TRUE)
# computing distances between the probe and exemplars in the memory
if (p %in% c(1,2)) {
distMatrix[obs, ] <- (rowSums((abs(memory -
probeExpanded))^p) )^(1/p)
} else if (p==Inf) {
distMatrix[obs, ] <- apply(abs(memory - probeExpanded), 1, max)
}
}
View(distMatrix)
View(distMatrix)
neighbors <- apply(distMatrix, 2, order) %>% t()
View(neighbors)
neighbors <- apply(distMatrix, 1, order) %>% t()
predLabels <- rep(NA, noObs)
prob <- matrix(NA, noObs, noLabels)
predLabels <- rep(NA, noObs)
prob <- matrix(NA, noObs, noLabels)
for (obs in 1:noObs) {
for(label in 1:noLabels){
prob[obs, label] <- sum(labels[neighbors[1:k, obs]]==levels(labels)[label])/k
}
predLabels[obs] <- levels(labels)[ which.max( prob[obs,] ) ]
}
for (obs in 1:noObs) {
for(label in 1:noLabels){
prob[obs, label] <- sum(labels[neighbors[obs, 1:k]]==levels(labels)[label])/k
}
predLabels[obs] <- levels(labels)[ which.max( prob[obs,] ) ]
}
table(predLabels, ss2$label)
kNN <- function(features, labels, memory = NULL,
k = 1, p = 2, type="train") {
# test the inputs
library(assertthat)
library(dplyr)
not_empty(features); not_empty(labels);
if (type == "train") {
assert_that(nrow(features) == length(labels))
}
is.string(type); assert_that(type %in% c("train", "predict"))
is.count(k);
assert_that(p %in% c(1, 2, Inf))
if (type == "predict") {
assert_that(not_empty(memory) &
ncol(memory) == ncol(features) &
nrow(memory) == length(labels))
}
# Compute the distance between each point and all others
noObs <- nrow(features)
labels <- as.factor(labels)
noLabels <- length(levels(labels))
# if we are making predictions on the test set based on the memory,
# we compute distances between each test observation and observations
# in our memory
if (type == "train") {
distMatrix <- matrix(NA, noObs, noObs)
for (obs in 1:noObs) {
# getting the probe for the current observation
probe <- as.numeric(features[obs,])
probeExpanded <- matrix(probe, nrow = noObs, ncol = 2,
byrow = TRUE)
# computing distances between the probe and exemplars in the
# training X
if (p %in% c(1,2)) {
distMatrix[obs, ] <- (rowSums((abs(features -
probeExpanded))^p) )^(1/p)
} else if (p==Inf) {
distMatrix[obs, ] <- apply(abs(features - probeExpanded), 1, max)
}
}
} else if (type == "predict") {
noMemory <- nrow(memory)
distMatrix <- matrix(NA, noObs, noMemory)
for (obs in 1:noObs) {
# getting the probe for the current observation
probe <- as.numeric(features[obs,])
probeExpanded <- matrix(probe, nrow = noMemory, ncol = 2,
byrow = TRUE)
# computing distances between the probe and exemplars in the memory
if (p %in% c(1,2)) {
distMatrix[obs, ] <- (rowSums((abs(memory -
probeExpanded))^p) )^(1/p)
} else if (p==Inf) {
distMatrix[obs, ] <- apply(abs(memory - probeExpanded), 1, max)
}
}
}
# Sort the distances in increasing numerical order and pick the first
# k elements
neighbors <- apply(distMatrix, 1, order) %>% t()
# the most frequent class in the k nearest neighbors and predicted label
predLabels <- rep(NA, noObs)
prob <- matrix(NA, noObs, noLabels)
for (obs in 1:noObs) {
for(label in 1:noLabels){
prob[obs, label] <- sum(labels[neighbors[obs, 1:k]]==levels(labels)[label])/k
}
predLabels[obs] <- levels(labels)[ which.max( prob[obs,] ) ]
}
return(list(prob=prob, predLabels=predLabels))
}
ss.knn2 <- kNN(cgrid, ss[,4], memory = ss[,1:2], k = 3, p = 2, type="predict")
ssm <- ss[,c("x1", "x2", "predLabels")]
ggplot(ssm, aes(x1, x2, colour = predLabels)) +
geom_point()
ggplot(data = ss,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
theme_bw() +
stat_contour(data = ss.knn2,
aes(x = x1, y = x2, z=predLabels))
ggplot(data = ss,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
theme_bw()
ggplot(data = ss,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
theme_bw() +
stat_contour(data = ss.knn2,
aes(x = x1, y = x2, z=as.numeric(predLabels)))
ggplot(data = ss,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2")
ggplot(data = ss,
aes(x = x1, y = x2, colour=y)) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2")
View(ss)
ggplot(data = ss,
aes(x = x1, y = x2, colour=label)) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2")
ggplot(data = ss,
aes(x = x1, y = x2, colour=label)) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
stat_contour(data = ss.knn2,
aes(x = x1, y = x2, z=as.numeric(predLabels)))
ggplot(data = ss,
aes(x = x1, y = x2, colour=label)) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
stat_contour(data = ss.knn2,
aes(x = x1, y = x2, z=as.numeric(predLabels)), bin=2)
aes(x = x1, y = x2, z=as.numeric(predLabels))) +
stat_contour()
ggplot(data = ss.knn2, aes(x = x1, y = x2, z=as.numeric(predLabels))) +
stat_contour()
cgrid$predLabels <- ss.knn2$predLabels
View(cgrid)
ggplot(data = ss,
aes(x = x1, y = x2, colour=label)) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
stat_contour(data = cgrid,
aes(x = x1, y = x2, z=predLabels))
ggplot(data = ss,
aes(x = x1, y = x2, colour=label)) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
stat_contour(data = cgrid,
aes(x = x1, y = x2, z=predLabels), bin=2)
summary(cgrid)
ggplot(data = cgrid, aes(x = x1, y = x2, z=as.numeric(predLabels))) +
stat_contour()
as.numeric(ss.knn2$predLabels)
cgrid$predLabels <- as.boolean(ss.knn2$predLabels)
cgrid$predLabels <- as.bool(ss.knn2$predLabels)
ss.knn2 <- kNN(features=ss2[,1:2], labels=ss[,3], memory = ss[,1:2], k = 3, p = 2, type="predict")
cgrid$predLabels <- ss.knn2$predLabels
View(cgrid)
ss.knn2 <- kNN(cgrid, ss[,3], memory = ss[,1:2], k = 3, p = 2, type="predict")
ss.knn2 <- kNN(cgrid, ss[,3], memory = ss[,1:2], k = 3, p = 2, type="predict")
kNN <- function(features, labels, memory = NULL,
k = 1, p = 2, type="train") {
# test the inputs
library(assertthat)
library(dplyr)
not_empty(features); not_empty(labels);
if (type == "train") {
assert_that(nrow(features) == length(labels))
}
is.string(type); assert_that(type %in% c("train", "predict"))
is.count(k);
assert_that(p %in% c(1, 2, Inf))
if (type == "predict") {
assert_that(not_empty(memory) &
ncol(memory) == ncol(features) &
nrow(memory) == length(labels))
}
# Compute the distance between each point and all others
noObs <- nrow(features)
labels <- as.factor(labels)
noLabels <- length(levels(labels))
# if we are making predictions on the test set based on the memory,
# we compute distances between each test observation and observations
# in our memory
if (type == "train") {
distMatrix <- matrix(NA, noObs, noObs)
for (obs in 1:noObs) {
# getting the probe for the current observation
probe <- as.numeric(features[obs,])
probeExpanded <- matrix(probe, nrow = noObs, ncol = 2,
byrow = TRUE)
# computing distances between the probe and exemplars in the
# training X
if (p %in% c(1,2)) {
distMatrix[obs, ] <- (rowSums((abs(features -
probeExpanded))^p) )^(1/p)
} else if (p==Inf) {
distMatrix[obs, ] <- apply(abs(features - probeExpanded), 1, max)
}
}
} else if (type == "predict") {
noMemory <- nrow(memory)
distMatrix <- matrix(NA, noObs, noMemory)
for (obs in 1:noObs) {
# getting the probe for the current observation
probe <- as.numeric(features[obs,])
probeExpanded <- matrix(probe, nrow = noMemory, ncol = 2,
byrow = TRUE)
# computing distances between the probe and exemplars in the memory
if (p %in% c(1,2)) {
distMatrix[obs, ] <- (rowSums((abs(memory -
probeExpanded))^p) )^(1/p)
} else if (p==Inf) {
distMatrix[obs, ] <- apply(abs(memory - probeExpanded), 1, max)
}
}
}
# Sort the distances in increasing numerical order and pick the first
# k elements
neighbors <- apply(distMatrix, 1, order) %>% t()
# the most frequent class in the k nearest neighbors and predicted label
predLabels <- rep(NA, noObs)
prob <- matrix(NA, noObs, noLabels)
for (obs in 1:noObs) {
for(label in 1:noLabels){
prob[obs, label] <- sum(labels[neighbors[obs, 1:k]]==levels(labels)[label])/k
}
predLabels[obs] <- levels(labels)[ which.max( prob[obs,] ) ]
}
return(list(prob=prob, predLabels=predLabels))
}
x1 <- seq(min(ss$x1), max(ss$x1), length.out = 100)
x2 <- seq(min(ss$x2), max(ss$x2), length.out = 100)
cgrid <- expand.grid(x1=x1, x2=x2)
ss.knn2 <- kNN(cgrid, ss[,3], memory = ss[,1:2], k = 3, p = 2, type="predict")
cgrid$predLabels <- ss.knn2$predLabels
View(cgrid)
ggplot(data = cgrid, aes(x = x1, y = x2, z=predLabels)) +
stat_contour()
cgrid$predLabels <- as.numeric(ss.knn2$predLabels)
ggplot(data = cgrid, aes(x = x1, y = x2, z=predLabels)) +
stat_contour()
ggplot(data = ss,
aes(x = x1, y = x2, colour=label)) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
stat_contour(data = cgrid, aes(x = x1, y = x2, z=predLabels), bin=2)
ggplot(data = ss,
aes(x = x1, y = x2, colour=label)) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
stat_contour(data = cgrid, aes(x = x1, y = x2, z=predLabels))
ggplot(data = ss,
aes(x = x1, y = x2, colour=label)) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2")
ggplot(data = ss,
aes(x = x1, y = x2, colour=label)) +
geom_point() +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
stat_contour(data = cgrid, aes(x = x1, y = x2, z=predLabels))
View(ss)
ggplot(data = ss,
aes(x = x1, y = x2, colour=label)) +
#     geom_point() +
#     ggtitle("Stick and Snake") +
#     xlab("x1") +
#     ylab("x2") +
stat_contour(data = cgrid, aes(x = x1, y = x2, z=predLabels))
ggplot(ssm, aes(x1, x2, colour = predLabels)) +
geom_point()
ggplot(ss, aes(x1, x2, colour = predLabels)) +
geom_point()
ggplot(ss, aes(x1, x2, colour = label)) +
geom_point()
ggplot(ss, aes(x1, x2, colour = label)) +
geom_point()+
stat_contour(data = cgrid, aes(x = x1, y = x2, z=predLabels))
ggplot(ss, aes(x1, x2, colour = label)) +
geom_point()+
stat_contour(data = cgrid, aes(x = x1, y = x2, z=as.factor(predLabels)))
ggplot(ss, aes(x1, x2, colour = label)) +
geom_point()+
stat_contour(data = cgrid, aes(x = x1, y = x2, z=predLabels))
ggplot(data = cgrid, aes(x = x1, y = x2, z=predLabels)) +
stat_contour()
ggplot(data = ss) +
geom_point(aes(x = x1, y = x2, colour=label)) +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
stat_contour(data = cgrid, aes(x = x1, y = x2, z=predLabels))
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/PS4/kNN_genData.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/PS4/kNN.R', echo=TRUE)
cgrid$predLabels <- ss.knn2$predLabels
ggplot(data = ss) +
geom_point(aes(x = x1, y = x2, colour=label)) +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
stat_contour(data = cgrid, aes(x = x1, y = x2, z=predLabels))
cgrid$predLabels <- as.numeric(ss.knn2$predLabels)
ggplot(data = ss) +
geom_point(aes(x = x1, y = x2, colour=label)) +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
stat_contour(data = cgrid, aes(x = x1, y = x2, z=predLabels))
cairo_pdf("plot.pdf")
ggplot(data = ss) +
geom_point(aes(x = x1, y = x2, colour=label)) +
ggtitle("Stick and Snake") +
xlab("x1") +
ylab("x2") +
stat_contour(data = cgrid, aes(x = x1, y = x2, z=predLabels))
dev.off()
