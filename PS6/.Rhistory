rlibs()
.rlibs()
.libPaths()
update.packages(ask = FALSE, repos = 'http://cran.rstudio.com/')
update.packages(ask = FALSE, repos = 'http://cran.rstudio.com/')
library("boot", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("methods", lib.loc="C:/Program Files/R/R-3.2.2/library")
.libPaths()
source('D:/Tanulas/Computing Lab/ps5.R')
cross.validation(mtcars$mpg, as.matrix(mtcars[2:10], 0.5, lasso.reg)
)
cross.validation(mtcars$mpg, as.matrix(mtcars[2:10]), 0.5, lasso.reg)
source('D:/Tanulas/Computing Lab/ps5.R')
cross.validation(mtcars$mpg, as.matrix(mtcars[2:10]), 0.5, lasso.reg)
source('D:/Tanulas/Computing Lab/ps5.R')
cross.validation(mtcars$mpg, as.matrix(mtcars[2:10]), 0.5, lasso.reg)
cross.validation(mtcars$mpg, as.matrix(mtcars[2:10]), 0.5, ridge.reg)
source('D:/Tanulas/Computing Lab/ps6.R')
y = mtcars$am
X=mtcars[,1:6]
X=as.matrix(mtcars[,1:6])
probit.iwls(y, X)
source('D:/Tanulas/Computing Lab/ps6.R')
probit.iwls(y, X)
max.iter <- 20
X          <- cbind(rep(1,length(y)),X)
X
beta       <- rep(0,ncol(X))
beta.prev  <- beta
eta        <- X %*% beta
mu         <- (y+0.5)/2
for( iter in 1:max.iter ){
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
}
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
beta       <- rep(0,ncol(X))
beta.prev  <- beta
eta        <- X %*% beta
mu         <- (y+0.5)/2
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
eta  <- X %*% beta
return( beta )
}
beta.prev <- beta
}
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
max.iter <- 20
beta       <- rep(0,ncol(X))
beta.prev  <- beta
eta        <- X %*% beta
mu         <- (y+0.5)/2
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
max.iter <- 20
# X          <- cbind(rep(1,length(y)),X)
beta       <- rep(0,ncol(X))
beta.prev  <- beta
eta        <- X %*% beta
mu         <- (y+0.5)/2
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
source('D:/Tanulas/Computing Lab/ps6.R')
probit.iwls(y,X)
load("D:/Tanulas/Computing Lab/Project/lyrics_data.RData")
lyrics[2345]
strsplit(lyrics[2345])
strsplit(lyrics[2345], ",")
lyrics2<-strsplit(lyrics, ",")
rm(lyrics2)
sapply(lyrics, strsplit, ",")
lyrics2<-sapply(lyrics, strsplit, ",")
head(lyrics2)
lyrics2[345]
lyrics2[5]
lyrics2[10]
setwd("D:/Tanulas/Advanced_Computational_Methods/PS6")
source("adaBoost.R")
library(gbm)
iterations=1
spam <- read.csv("Spam/spambase.data")
set.seed(1113)
train.index <- sample(nrow(spam), 4000)
spam.train <- spam[train.index,]
spam.test <- spam[-train.index,]
predict.adaBoost <- function(trees, alphas, data){
N <- nrow(data)
noTrees <- length(trees)
predictions <- matrix(NA, N, noTrees)
final.classifier <- rep(0, N)
for (m in 1:noTrees){
cat(m, '\n')
pred <- as.numeric(as.character(predict(trees[[m]], data, type="class")))
final.classifier <- final.classifier + alphas[m]*pred
}
ret <- sign(-final.classifier)
ret[ret==-1] <- 0
return(list(predLabels = ret))
}
my.test <- rep(NA, 100)
gbm.test <- rep(NA, 100)
my.train <- rep(NA, 100)
gbm.train <- rep(NA, 100)
errorrates <- data.frame(my.test, gbm.test, my.train, gbm.train)
a <- adaBoost(X1 ~., spam.train, 5, iterations)
model.gbm <- gbm(X1 ~ ., data=spam.train, dist="adaboost", n.tree = iterations, shrinkage=1)
for(iterations in 1:2){
cat("iterations:", iterations, "\n")
model.my <- adaBoost(X1 ~., spam.train, 5, iterations)
errorrates$my.train[iterations] <- sum(model.my[[1]]!=spam.train$X1)/length(spam.test$X1)
pred.my <-predict.adaBoost(trees = model.my$trees, alphas = model.my$alphas, data = spam.test)
errorrates$my.test[iterations] <- sum(pred.my[[1]]!=spam.test$X1)/length(spam.test$X1)
model.gbm <- gbm(X1 ~ ., data=spam.train, dist="adaboost", n.tree = iterations, shrinkage=1)
errorrates$gbm.train[iterations] <- sum(model.gbm$fit!=spam.train$X1)/length(spam.test$X1)
pred.gbm <- sign(predict(model.gbm, spam.test, n.tree=iterations))
pred.gbm[pred.gbm==-1] <- 0
errorrates$gbm.test[iterations] <- sum(pred.gbm!=spam.test$X1)/length(spam.test$X1)
}
View(errorrates)
for(iterations in 1:3){
cat("iterations:", iterations, "\n")
model.my <- adaBoost(X1 ~., spam.train, 5, iterations)
errorrates$my.train[iterations] <- sum(model.my[[1]]!=spam.train$X1)/length(spam.test$X1)
pred.my <-predict.adaBoost(trees = model.my$trees, alphas = model.my$alphas, data = spam.test)
errorrates$my.test[iterations] <- sum(pred.my[[1]]!=spam.test$X1)/length(spam.test$X1)
model.gbm <- gbm(X1 ~ ., data=spam.train, dist="adaboost", n.tree = iterations, shrinkage=1)
errorrates$gbm.train[iterations] <- sum(model.gbm$fit!=spam.train$X1)/length(spam.test$X1)
pred.gbm <- sign(predict(model.gbm, spam.test, n.tree=iterations))
pred.gbm[pred.gbm==-1] <- 0
errorrates$gbm.test[iterations] <- sum(pred.gbm!=spam.test$X1)/length(spam.test$X1)
}
View(errorrates)
for(iterations in 1:4){
cat("iterations:", iterations, "\n")
model.my <- adaBoost(X1 ~., spam.train, 5, iterations)
errorrates$my.train[iterations] <- sum(model.my[[1]]!=spam.train$X1)/length(spam.test$X1)
pred.my <-predict.adaBoost(trees = model.my$trees, alphas = model.my$alphas, data = spam.test)
errorrates$my.test[iterations] <- sum(pred.my[[1]]!=spam.test$X1)/length(spam.test$X1)
}
View(errorrates)
for(iterations in 1:4){
model.gbm <- gbm(X1 ~ ., data=spam.train, dist="adaboost", n.tree = iterations, shrinkage=1)
errorrates$gbm.train[iterations] <- sum(model.gbm$fit!=spam.train$X1)/length(spam.test$X1)
pred.gbm <- sign(predict(model.gbm, spam.test, n.tree=iterations))
pred.gbm[pred.gbm==-1] <- 0
errorrates$gbm.test[iterations] <- sum(pred.gbm!=spam.test$X1)/length(spam.test$X1)
}
View(errorrates)
sum(model.gbm$fit!=spam.train$X1)/length(spam.test$X1)
model.gbm <- gbm(X1 ~ ., data=spam.train, dist="adaboost", n.tree = 5, shrinkage=1)
errorrates$gbm.train[5] <- sum(model.gbm$fit!=spam.train$X1)/length(spam.test$X1)
View(errorrates)
length(spam.test$X1)
sum(pred.gbm!=spam.test$X1)
75/600
sum(pred.gbm!=spam.test$X1)/length(spam.test$X1)
for(iterations in 1:4){
cat("iterations:", iterations, "\n")
model.my <- adaBoost(X1 ~., spam.train, 5, iterations)
errorrates$my.train[iterations] <- sum(model.my[[1]]!=spam.train$X1)/length(spam.train$X1)
pred.my <-predict.adaBoost(trees = model.my$trees, alphas = model.my$alphas, data = spam.test)
errorrates$my.test[iterations] <- sum(pred.my[[1]]!=spam.test$X1)/length(spam.test$X1)
model.gbm <- gbm(X1 ~ ., data=spam.train, dist="adaboost", n.tree = iterations, shrinkage=1)
errorrates$gbm.train[iterations] <- sum(model.gbm$fit!=spam.train$X1)/length(spam.train$X1)
pred.gbm <- sign(predict(model.gbm, spam.test, n.tree=iterations))
pred.gbm[pred.gbm==-1] <- 0
errorrates$gbm.test[iterations] <- sum(pred.gbm!=spam.test$X1)/length(spam.test$X1)
}
View(errorrates)
model.my <- adaBoost(X1 ~., spam.train, 5, iterations)
model.my$predLabels
for(iterations in 1:10){
cat("iterations:", iterations, "\n")
model.my <- adaBoost(X1 ~., spam.train, 5, iterations)
errorrates$my.train[iterations] <- sum(model.my$predlabels!=spam.train$X1)/length(spam.train$X1)
pred.my <-predict.adaBoost(trees = model.my$trees, alphas = model.my$alphas, data = spam.test)
errorrates$my.test[iterations] <- sum(pred.my[[1]]!=spam.test$X1)/length(spam.test$X1)
model.gbm <- gbm(X1 ~ ., data=spam.train, dist="adaboost", n.tree = iterations, shrinkage=1)
errorrates$gbm.train[iterations] <- sum(model.gbm$fit!=spam.train$X1)/length(spam.train$X1)
pred.gbm <- sign(predict(model.gbm, spam.test, n.tree=iterations))
pred.gbm[pred.gbm==-1] <- 0
errorrates$gbm.test[iterations] <- sum(pred.gbm!=spam.test$X1)/length(spam.test$X1)
}
View(errorrates)
spam.train$X1
model.my$predlabels
model.my[[1]]
spam.train$X1
model.my[[1]]!=spam.train$X1
